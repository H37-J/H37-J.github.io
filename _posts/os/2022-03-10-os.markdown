---
layout:     post
title:      "운영체제 기본 개념들"
subtitle:   "운영체제에 대한 정리"
date:       2021-08-30 12:00:00
author:     "H37-J"
header-img: "img/post-bg-2015.jpg"
catalog: true
tags:
    - os
---

### 운영체제

1. 운영 체제는 컴퓨터 하드웨어와 소프트웨어 자원을 관리하는 프로그램으로 컴퓨터의 초석.  
2. 컴퓨터 하드웨어 및 소프트웨어 리소소르르 관리하기 위해 컴퓨터에서 실행되는 소프트웨어 프로그램
3. 커털은 운영체제의 핵심 부분으로 시스템의 메모리 관리, 하드웨어 장치관리, 파일시스템관리 및 응용 프로그램 관리를 담당한다. 커널은 응용 프로그램과 하드웨어를 연결하는 다리 역할을 하며 시스템의 성능과 언정성을 결정 함.

### 시스템 호출

* 장치관리. 장치 요청 또는 해제
* 파일관리, 파일 읽기, 쓰기, 생성 및 삭제
* 프로세스 제어, 프로세스 생성, 취소 , 차단 및 깨우기
* 프로세스 통신, 메시지 전달 또는 프로세스간 신호 전달
* 메모리관리, 메모리할당 재활용, 작업이 차지하는 메모리 영역의 크기 및 주소 획득

### 프로세스 통신

* 파이프: 선호도가 있는 부모와 자식 프로세스 사이 또는 형제 프로세스 사이의 통신에 사용
* 익명 파이프: 이름이 없기 때문에 부모자식 프로세스간 통신에만 사용
* 메시지큐:메모리에 저장되고 메시지 큐 식별자로 시별된다. 선입선출을 따른다
* 세마포어: 공유 데이터에 대한 다중 프로세스 액세스를 위한 카운터. 프로세스간의 동기화가 목적이고 이러한 유형의 통신은 주로 동기화 관련 문제를 해결하고 경쟁 조건을 방지하는데 사용.
* 공유메모리: 여러 프로세스가 동일한 메모리 공간에 액세스할 수 있도록 함. 다른 프로세스는 다른 프로세스의 공유 메모리에있는 데이터 업데이트를 제때 볼수 있다. 
* 소켓: 서버간의 네트워크를 통신하는데 사용. TCP/IP를 지원하는 네트워크 통신의 기본 동작 단위로 서로 다른 호스트간의 프로세스 간 양방향 통신의 종점으로 볼 수 있으며 통신 프로세스를 완성시킨다.

### 쓰레드간 동기화 

* 뮤텍스: 뮤텍스 개체 메커니즘을 사용하여 뮤텍스 개체를 소유한 스레드만 공용 리소스에 액세스 할 수 있는 권한을 갖는다. 뮤텍스 개체가 하나만 있기 떄문에 공통 리소스가 여러 스레드에서 동시에 액세스되지 않는것을 보장한다. 

* 세마포어: 여러 스레드가 동시에 동일한 리소스에 액세스할 수 있지만 동시에 이 리소스에 액세스하는 최대 스레드 수를 제어해야한다.
* 이벤트: Wait/Notify알림 연산을 통해 멀티 쓰레드 동기화를 유지할 수 있으면 멀티쓰레드 우선순위 비교 연산도 구현할 수 있다.

### 프로세스 스케줄링 알고리즘

* FCFS(First-Come, First-Served)스케줄링 알고리즘: 준비된 대기열에서 가장 먼저 대기열에 들어가는 프로세스를 선택하여 자원을 할당하고 즉시 실행하도록 하고 완료될때까지 또는 이벤트가 발생하여 포기하도록 차된될 때까지 계속한다.
* SJF(Short Job First)스케줄링: ready queue에서 예상 실행 시간이 가장 짧은 프로세스를 선택하여 자원을 할당하고 즉시 실행하고 완료되거나 이벤트가 발생하여 차단되고 점유를 포기할떄까지 계속 CPU를 차지함.
* Round Robin: 각 프로세스에는 해당 프로세스가 실행되도록 허용한 시간인 타임 슬라이라고 하는 기간이 할당 됨.
* 다단계 피드백: Unix가 사용하는 스케줄링 알고리즘. 우선순위가 높은 프로세스를 선택 할 수도있고 짧은 작업을 빠르게 완료할수도 있다.
* Priority: 각 프로세스에 우선순위가 부여되고, 우선순위가 가장 높은게 먼저 스케줄링됨.

### 리눅스 디렉토리 구조

* bin: 바이너리 실행 파일(ls, cat, mkdir)등을 저장한다. 일반적으로 사용되는 명령은 여기에 있다.
* etc: 시스템 관리 및 구성 파일
* home: 모든 사용자 파일이 저장되는 루트 디렉터리로, 사용자 홈 디렉터리의 기준점이 된다. 예를들어 사용자 사용자의 홈 디렉터리는 /home/user이며 ~user와 같다.
* usr: 시스템 응용 프로그램을 저장하는데 사용
* opt: 추가로 설치된 선택적 응용 프로그램 패키지가 있는 곳. 여기에 tomcat등이 들어간다
* proc: 시스템 메모리의 매핑인 가상 파일 시스템 디렉터리. 이 디렉터리에 직접 액세스하여 시스템 정보를 얻을 수 있다
* root: 슈퍼유저의 홈 디렉토리
* sbin: 바이너리 실행 파일을 저장하고 루트만 액세스할수 있다. 시스템 관리자가 사용하는 시스템 수준 관리 명령과 프로그램이 저장된다. ifconfig등
* dev: 장치 파일을 저장하는데 사용
* mnt: 시스템 관리자가 임시 파일 시스템을 설치하는 설치 지점 시스템은 사용자가 다른 파일 시스템을 임시로 마운트 할 수 있도록 이 디렉터리를 제공한다.
* boot: 시스템 부팅에 사용되는 파일들을 저장
* lib: 시스템 운영과 관련된 라이브러리 파일을 저장
* tmp: 다양한 임시파일을 저장
* var: 런타임 중에 데이털르 변경해야 하는 파일을 저장하는데 사용되며 다양한 서비스의 로그파일ㅋ등과 같은 일부 대용량 파일의 오버플로 영역이기도 하다
* lost+found: 시스템이 비정상적으로 종료된 후 홈리스 파일들이 저장

### 리눅스 명령어

mkdir: 디렉터리 추가  
find: 디렉터리를 찾거나 파일을 찾음 ex)  find /home -name *.txt  
mv: 디렉터리 이름을 바꾸거나 이동에 사용  
cp: 디렉터리, 파일 복사  
tar: 압축 -z: gzip 압축 명령을 호출하여 압축, -c 패키지파일, -v 실행중인 프로세스 표시, -f 파일이름 지정. tar -zcvf test.tar.gz aaa.txt bbb.txt  
tar -xvf: 압축을 품
  
ps -ef: 실행중인 프로세스 확인.
kill -9 pid: 프로세스 종료  

ifconfig: 네트워크 카도 정보 보기
ping: 연결 확인
netstat -an: 포트 사용량